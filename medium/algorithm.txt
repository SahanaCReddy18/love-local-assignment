1.TreeNode Class Definition:
Define a class TreeNode representing a node in a binary tree. Each node has a value (val), a left child (left), and a right child (right).

2.buildBST Function:
Define a function buildBST(nums) that takes a list of integers nums as input.
If the list nums is empty, return None.
Create the root of the binary search tree (BST) using the first element of nums.
Iterate through the remaining elements of nums and insert each element into the BST using the insertIntoBST function.
Return the root of the BST.

3.insertIntoBST Function:
Define a function insertIntoBST(root, val) that inserts a value val into a BST rooted at root.
If root is None, create a new node with value val and return it.
If val is less than the current node's value, recursively insert it into the left subtree.
If val is greater than the current node's value, recursively insert it into the right subtree.
Return the modified root.

4.lowestCommonAncestor Function:
Define a function lowestCommonAncestor(root, p, q) that finds the lowest common ancestor (LCA) of two nodes with values p and q in a BST.
If the root is None or matches either p or q, it is the LCA and is returned.
Recursively search the left and right subtrees to find the LCA.
If both nodes are found in different subtrees, the current root is the LCA.
If one of the nodes is found, return that as the LCA.

5.User Input:
Take user input for the values of the nodes in the BST (nums), the value of node p, and the value of node q.

6.Build BST and Create Nodes:
Build the BST using the buildBST function with the provided list of values (nums).
Create nodes p and q with values provided by the user.

7.Find and Print LCA:
Find the lowest common ancestor (lca) of nodes p and q in the BST using the lowestCommonAncestor function.
Print the result, indicating the value of the lowest common ancestor of nodes p and q.